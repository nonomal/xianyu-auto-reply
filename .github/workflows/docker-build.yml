name: 🐳 Build and Push Multi-Arch Docker Image

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: '镜像版本号 (例如: latest)'
        required: true
        default: 'latest'
  
  # 自动触发
  push:
    # 当创建tag时触发
    tags:
      - 'v*'
    # 当有代码推送到主分支时触发
    branches:
      - main
      - master
    # 排除不需要构建的文件
    paths-ignore:
      - 'README.md'
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

jobs:
  build-and-push:
    name: 🏗️ Build Multi-Arch Docker Images
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          # 国际版 (Docker Hub)
          - dockerfile: Dockerfile
            registry: docker.io
            image_name: zhinianblog/xianyu-auto-reply
            tag_suffix: ''
          
          # 国内版 (阿里云)
          - dockerfile: Dockerfile
            registry: registry.cn-shanghai.aliyuncs.com
            image_name: zhinian-software/xianyu-auto-reply
            tag_suffix: ''
    
    steps:
    - name: 📥 Checkout代码
      uses: actions/checkout@v4
    
    - name: 🔧 设置QEMU (ARM模拟)
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64
    
    - name: 🔧 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        platforms: linux/amd64,linux/arm64
    
    - name: 🔐 登录Docker Hub
      if: matrix.registry == 'docker.io'
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 🔐 登录阿里云镜像仓库
      if: matrix.registry == 'registry.cn-shanghai.aliyuncs.com'
      uses: docker/login-action@v3
      with:
        registry: registry.cn-shanghai.aliyuncs.com
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_TOKEN }}
    
    - name: 📝 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ matrix.registry }}/${{ matrix.image_name }}
        tags: |
          # 从tag提取版本号: v1.0.5 -> 1.0.5
          type=semver,pattern={{version}}
          # 从手动输入提取
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          # latest标签
          type=raw,value=latest
    
    - name: 🏗️ 构建并推送多架构镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ github.event.head_commit.timestamp }}
          VERSION=${{ steps.meta.outputs.version }}
    
    - name: 📊 输出镜像信息
      run: |
        echo "========================================="
        echo "✅ 镜像构建成功！"
        echo "========================================="
        echo "镜像仓库: ${{ matrix.registry }}"
        echo "镜像名称: ${{ matrix.image_name }}"
        echo "支持架构: linux/amd64, linux/arm64"
        echo ""
        echo "📦 镜像标签:"
        echo "${{ steps.meta.outputs.tags }}"
        echo ""
        echo "🚀 使用方法:"
        echo "docker pull ${{ matrix.registry }}/${{ matrix.image_name }}:latest"
        echo "========================================="

  # 测试多架构镜像
  test-images:
    name: 🧪 Test Multi-Arch Images
    needs: build-and-push
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        registry: 
          - registry.cn-shanghai.aliyuncs.com/zhinian-software/xianyu-auto-reply
    
    steps:
    - name: 🔧 设置QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ matrix.platform }}
    
    - name: 🧪 测试镜像
      run: |
        echo "测试平台: ${{ matrix.platform }}"
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ matrix.registry }}:latest \
          python --version || true
        
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ matrix.registry }}:latest \
          python -c "import sys; print(f'Python {sys.version}')" || true

  # 创建Release说明
  create-release-notes:
    name: 📝 Create Release Notes
    needs: [build-and-push, test-images]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Checkout代码
      uses: actions/checkout@v4
    
    - name: 📝 生成Release说明
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        cat > release_notes.md << EOF
        # 🐳 Docker镜像发布 - v${VERSION}
        
        ## 📦 镜像信息
        
        ### 国际版 (Docker Hub)
        \`\`\`bash
        docker pull zhinianboke/xianyu-auto-reply:${VERSION}
        docker pull zhinianboke/xianyu-auto-reply:latest
        \`\`\`
        
        ### 国内版 (阿里云)
        \`\`\`bash
        docker pull registry.cn-shanghai.aliyuncs.com/zhinian-software/xianyu-auto-reply:${VERSION}
        docker pull registry.cn-shanghai.aliyuncs.com/zhinian-software/xianyu-auto-reply:latest
        \`\`\`
        
        ## 🖥️ 支持的架构
        
        - ✅ **linux/amd64** - Intel/AMD处理器
        - ✅ **linux/arm64** - ARM64处理器
        
        ## 🚀 快速启动
        
        ### x86_64服务器
        \`\`\`bash
        docker run -d -p 8080:8080 --restart always \\
          -v \$PWD/xianyu-auto-reply/:/app/data/ \\
          --name xianyu-auto-reply \\
          registry.cn-shanghai.aliyuncs.com/zhinian-software/xianyu-auto-reply:${VERSION}
        \`\`\`
        
        ### ARM64服务器
        \`\`\`bash
        docker run -d -p 8080:8080 --restart always \\
          --platform linux/arm64 \\
          -v \$PWD/xianyu-auto-reply/:/app/data/ \\
          --name xianyu-auto-reply \\
          registry.cn-shanghai.aliyuncs.com/zhinian-software/xianyu-auto-reply:${VERSION}
        \`\`\`
        
        ## 📋 更新内容
        
        查看 [CHANGELOG.md](./CHANGELOG.md) 了解详细更新内容。
        
        ## 🔍 验证镜像
        
        \`\`\`bash
        # 检查镜像架构
        docker manifest inspect registry.cn-shanghai.aliyuncs.com/zhinian-software/xianyu-auto-reply:${VERSION}
        
        # 测试运行
        docker run --rm registry.cn-shanghai.aliyuncs.com/zhinian-software/xianyu-auto-reply:${VERSION} python --version
        \`\`\`
        
        ## 💡 适用场景
        
        ### x86_64 (amd64)
        - 传统服务器和VPS
        - 阿里云、腾讯云、华为云标准实例
        - 本地PC和虚拟机
        
        ### ARM64 (aarch64)
        - Oracle Cloud - Ampere A1 (永久免费)
        - AWS Graviton2/3实例
        - 阿里云倚天710实例
        - 树莓派4/5
        - Apple M系列芯片 (通过Docker Desktop)
        
        ---
        
        **构建时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Git提交**: ${GITHUB_SHA}
        EOF
        
        cat release_notes.md
    
    - name: 💾 创建Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

